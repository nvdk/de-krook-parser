#!/usr/bin/env ruby
require 'optparse'
require 'pstore'
require 'date'
require_relative '../lib/de-krook-parser'

## Options using optparse
options = {
  output: ".",
  input: nil,
  base_iri: "https://qa.stad.gent/",
  append: false,
  config: FileUtils.pwd,
  type: "all",
  year: DateTime.now.year
}
opt_parser = OptionParser.new do |opt|
opt.banner = "Usage: #{__FILE__} [OPTIONS]"
  opt.separator ''
  opt.separator 'Options'

  opt.on('-o', '--output OUTPUT_PATH', '(relative) filepath to store output, default "."') do |file|
    options[:output] = file
  end
  opt.on('-i', '--input INPUT_PATH', '(relative) filepath to the files to be parsed, REQUIRED') do |file|
    options[:input] = file
  end
  opt.on('-f','--full', 'do a full conversion instead of starting after last parsed location') do
    options[:full] = true
  end
  opt.on('-b', '--base-iri IRI', 'base IRI to be used for creating resources, default "http://qa.stad.gent/"') do |iri|
    options[:base_iri] = iri
  end
  opt.on('-c', '--config PATH', 'PATH to config file, default "./"') do |file|
    options[:config] = file
  end
  opt.on('-h', '--help', 'help') do
    puts opt_parser
    exit
  end
  opt.on('-t', '--type TYPE', 'type to be parsed: [all, werk, locatie, exemplaar, uitlening_lener, uitlening_tijd, reservatie], default "all"') do |type|
    options[:type] = type
  end
  opt.on('-y', '--year YEAR', 'year to be used for loan and loan_time, default "' + options[:year].to_s + '"') do |year|
    options[:year] = year
  end
end

begin
  opt_parser.parse!
  mandatory = [:input]
  missing = mandatory.select{ |param| options[param].nil? } 
  unless missing.empty?                                           
    raise OptionParser::MissingArgument.new(missing.join(', '))
  end                                                          
rescue OptionParser::InvalidOption, OptionParser::MissingArgument 
  puts $!.to_s
  puts opt_parser
  exit                                                            
end

input_dir = options[:input] 
output_dir = File.realpath(options[:output])
baseIRI = options[:base_iri] ? options[:base_iri] : 'https://qa.stad.gent/'
mode = options[:full] ? :full : :incremental
config = PStore.new(File.join(options[:config],'krook-parser.store'))
year = options[:year]
type = options[:type]

config.transaction do
  files = ["Werk.csv", "Locatie.csv", "Exemplaar.csv", "Uitlening_Lener_#{year}.csv", "Uitlening_Tijd_#{year}.csv", "Reservatie_Tijd.csv"]
  config[:last_run] ||= Hash.new
  files.each do |val|
    unless config[:last_run].has_key?(val)
      config[:last_run][val] = 0
    end
  end
end


DeKrookParser.parse(input_dir: input_dir, output_dir: output_dir, base_iri: baseIRI, mode: mode, config: config, year: year, type: type)



